import { webSocketReportMessagesLibrary } from "../../Adds/Reports/webSocketResponseMessage"

describe("webSocketReportMessagesLibrary возвращает ожидаемые строки", () => {
    test("Вызов каждой полосы и тестирование ожданий", () => {
        expect(webSocketReportMessagesLibrary.userConnected("Alex"))
        .toBe("Alex присоединился к комнате")
        expect(webSocketReportMessagesLibrary.gameHasBeenStartedAlready())
        .toBe("Игра уже началась")
        expect(webSocketReportMessagesLibrary.roomIsNotExists())
        .toBe("Такой комнаты не существует")
        expect(webSocketReportMessagesLibrary.userHasBeenLeaved("Alex"))
        .toBe("Alex покинул комнату")
        expect(webSocketReportMessagesLibrary.logInWrongDatas())
        .toBe("Неверные данные для входа в систему")
        expect(webSocketReportMessagesLibrary.successLogIn())
        .toBe("Вы успешно вошли в систему")
        expect(webSocketReportMessagesLibrary.alreadyRegistred())
        .toBe("Пользоавтель с таким логином уже зарегистрирован")
        expect(webSocketReportMessagesLibrary.successRegistred())
        .toBe("Успешно зарегистрирован")
        expect(webSocketReportMessagesLibrary.gameStartedFailed())
        .toBe("Игру не удалось начать, вы не являетесь лидером")
        expect(webSocketReportMessagesLibrary.gameStartedSuccessfully())
        .toBe("Игра стартовала успешно")
        expect(webSocketReportMessagesLibrary.roomCreated("2flla"))
        .toBe("Комната 2flla успешно создана. Вы её лидер")
        expect(webSocketReportMessagesLibrary.playerMakeTurn("Alex"))
        .toBe("Игрок Alex сделал свой выбор")
        expect(webSocketReportMessagesLibrary.afterTurnSwitchToChek("Alex"))
        .toBe("После выбора игрока Alex начинается стадия проверки. Ожидание подтверждения")
    })
})